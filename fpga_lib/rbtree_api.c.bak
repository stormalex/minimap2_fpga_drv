#include <stdio.h>
#include <stdlib.h>

#include "rbtree_api.h"

#define CHECK_INSERT 1    // "插入"动作的检测开关(0，关闭；1，打开)
#define CHECK_DELETE 1    // "删除"动作的检测开关(0，关闭；1，打开)
#define LENGTH(a) ( (sizeof(a)) / (sizeof(a[0])) )

struct my_node {
    struct rb_node rb_node;
    
    void* addr;
    unsigned int size;
};

/*
 * 查找"红黑树"中键值为offset的节点。没找到的话，返回NULL。
 */
int rb_search(struct rb_root *root, void* addr, unsigned int *size)
{
    struct rb_node *rbnode = root->rb_node;

    while (rbnode!=NULL)
    {
        struct my_node *mynode = container_of(rbnode, struct my_node, rb_node);

        if (addr < mynode->addr)
            rbnode = rbnode->rb_left;
        else if (addr > mynode->addr)
            rbnode = rbnode->rb_right;
        else {
            *size = mynode->size;
            return 0;
        }
    }
    
    return -1;
}

/*
 * 将offset/size插入到红黑树中。插入成功，返回0；失败返回-1。
 */
int rb_insert(struct rb_root *root, void* addr, unsigned int size)
{
    struct my_node *mynode; // 新建结点
    struct rb_node **tmp = &(root->rb_node), *parent = NULL;

    /* Figure out where to put new node */
    while (*tmp)
    {
        struct my_node *my = container_of(*tmp, struct my_node, rb_node);

        parent = *tmp;
        if (addr < my->addr)
            tmp = &((*tmp)->rb_left);
        else if (addr > my->addr)
            tmp = &((*tmp)->rb_right);
        else
            return -1;
    }

    // 如果新建结点失败，则返回。
    if ((mynode=malloc(sizeof(struct my_node))) == NULL)
        return -1; 
    mynode->addr = addr;
    mynode->size = size;

    /* Add new node and rebalance tree. */
    rb_link_node(&mynode->rb_node, parent, tmp);
    rb_insert_color(&mynode->rb_node, root);

    return 0;
}

/* 
 * 删除键值为offset的结点
 */
void rb_delete(struct rb_root *root, void* addr)
{
    struct my_node *mynode = NULL;
    struct rb_node *rbnode = root->rb_node;

    while (rbnode!=NULL)
    {
        struct my_node *mynode = container_of(rbnode, struct my_node, rb_node);

        if (addr < mynode->addr)
            rbnode = rbnode->rb_left;
        else if (addr > mynode->addr)
            rbnode = rbnode->rb_right;
        else {
            // 从红黑树中删除节点mynode
            rb_erase(&mynode->rb_node, root);
            free(mynode);
            return;
        }
    }

    return;
}

/*
 * 打印"红黑树"
 */
static void print_rbtree(struct rb_node *tree, void* addr, int direction)
{
    if(tree != NULL)
    {   
        if(direction==0)    // tree是根节点
            printf("%d(B) is root\n", addr);
        else                // tree是分支节点
            printf("%d(%s) is %d's %6s child\n", addr, rb_is_black(tree)?"B":"R", rb_entry(rb_parent(tree), struct my_node, rb_node)->addr, direction==1?"right" : "left");

        if (tree->rb_left)
            print_rbtree(tree->rb_left, rb_entry(tree->rb_left, struct my_node, rb_node)->addr, -1);
        if (tree->rb_right)
            print_rbtree(tree->rb_right,rb_entry(tree->rb_right, struct my_node, rb_node)->addr,  1); 
    }   
}

void print_tree(struct rb_root *root)
{
    if (root!=NULL && root->rb_node!=NULL)
        print_rbtree(root->rb_node, rb_entry(root->rb_node, struct my_node, rb_node)->addr,  0); 
}